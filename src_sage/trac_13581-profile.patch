# HG changeset patch
# User Raniere Silva <r.gaia.cs@gmail.com>
# Date 1350304726 10800
# Node ID 5fbd0c4dc94c91bfde135d906950ee8bbfaa5539
# Parent  29fdb36330271bb91d2fde39d7472d59ebef0a5f
version 0.2 of get_profile().

* Now it return just one integer as describe by Cuthill and McKee.

This function is important because it is used to benchmark operations with
sparse matrix.

Work supported by CNPq, Conselho Nacional de Desenvolvimento Cientifico  e
Tecnologico - Brasil.

diff --git a/sage/matrix/matrix2.pyx b/sage/matrix/matrix2.pyx
--- a/sage/matrix/matrix2.pyx
+++ b/sage/matrix/matrix2.pyx
@@ -13032,6 +13032,110 @@
 
         return (p, q)
 
+    def get_profile(self):
+        r"""
+        Return the number of elementos in the profile of the
+        symmetric matrix.
+
+        INPUT:
+
+        - ``self`` - a square matrix.
+
+        OUTPUT:
+
+        The profile of the matrix.
+
+        EXAMPLES::
+
+            sage: A = matrix([[2,0],[0,7]]); A
+            [2 0]
+            [0 7]
+            sage: A.get_profile()
+            0
+            sage: A = matrix([[2,5],[5,7]]); A
+            [2 5]
+            [5 7]
+            sage: A.get_profile()
+            1
+            sage: A = matrix([[ 0, 1, 0, 0],
+            ...               [ 1, 8, 9,15],
+            ...               [ 0, 9,16,17],
+            ...               [ 0,15,17,17]]); A
+            [ 0  1  0  0]
+            [ 1  8  9 15]
+            [ 0  9 16 17]
+            [ 0 15 17 17]
+            sage: A.get_profile()
+            4
+
+        Non-symmetric matrices. ::
+
+            sage: A = matrix([[2,0],[3,7]]); A
+            [2 0]
+            [3 7]
+            sage: A.get_profile()
+            Traceback (most recent call last):
+            ...
+            ValueError: matrix must be symmetric.
+
+        Two rectangular matrices.  ::
+
+            sage: B = matrix([[ 0, 1, 2, 3, 4, 0, 0],
+            ...               [ 7, 8, 9,10,11,12, 0],
+            ...               [ 0,15,16,17,18,19,20]]); B
+            [ 0  1  2  3  4  0  0]
+            [ 7  8  9 10 11 12  0]
+            [ 0 15 16 17 18 19 20]
+            sage: B.get_profile()
+            Traceback (most recent call last):
+            ...
+            ValueError: matrix must be symmetric.
+            sage: C = matrix([[0,1],[2,3],[0,5]]); C
+            [0 1]
+            [2 3]
+            [0 5]
+            sage: C.get_profile()
+            Traceback (most recent call last):
+            ...
+            ValueError: matrix must be symmetric.
+
+        Empty matrices behave properly. ::
+
+            sage: E = matrix(0, 5, []); E
+            []
+            sage: E.get_profile()
+            Traceback (most recent call last):
+            ...
+            ValueError: matrix can't be empty.
+
+        REFERENCES:
+
+        - [CM69] E. Cuthill and J. McKee. Reducing the bandwidth of sparse
+          symmetric matrics. In Proceedings of the 1969 24th national
+          conference, ACM '69, pages 157-172, New York, NY, USA, 1969. ACM.
+
+        AUTHORS:
+
+        - Raniere Silva (2012)
+        """
+        if not self:
+            raise ValueError('matrix can\'t be empty.')
+
+        if not self.is_symmetric():
+            raise ValueError('matrix must be symmetric.')
+
+        cdef int i, j
+
+        # Compute the lower profile.
+        p = 0
+        for i in xrange(1, self.nrows()):
+            for j in xrange(i):
+                if self[i, j] != 0:
+                    p = p + (i - j)
+                    break
+
+        return p
+
     # A limited number of access-only properties are provided for matrices
     property T:
         r"""
